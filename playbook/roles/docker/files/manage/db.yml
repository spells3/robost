- name: 'DB management'
  hosts: localhost
  connection: local
  vars_files:
    - '{{ playbook_dir }}/db_config.yml'
    - '{{ playbook_dir }}/general_config.yml'
  tasks:
    - name: Check/create network
      docker_network:
        name: '{{ network_name }}'
      tags:
        - never
        - start

    - name: volume for pgsql
      docker_volume:
        name: 'pgsql'
      tags:
        - never
        - start

    - name: start PostgeSQL
      docker_container:
        name: '{{ db_host }}'
        image: 'postgres:13-alpine'
        container_default_behavior: no_defaults
        purge_networks: yes
        network_mode: default
        networks:
          - name: '{{ network_name }}'
        volumes:
          - 'pgsql:/var/lib/postgresql/data/'
        env:
          POSTGRES_USER: '{{ db_user }}'
          POSTGRES_PASSWORD: '{{ db_password }}'
          POSTGRES_DB: '{{ db_name }}'
        ports:
          - '127.0.0.1:5432:5432/tcp'
        restart_policy: always
        state: started
      tags:
        - never
        - start

    - name: Create DB
      community.postgresql.postgresql_db:
        name: '{{ django_db_name }}'
        login_host: '127.0.0.1'
        login_password: '{{ db_password }}'
        login_user: '{{ db_user }}'
        maintenance_db: '{{ db_name }}'
      tags:
        - never
        - create

    - name: Create User
      community.postgresql.postgresql_user:
        name: '{{ django_db_user }}'
        password: '{{ django_db_pass }}'
        priv: 'ALL'
        login_host: '127.0.0.1'
        login_password: '{{ db_password }}'
        login_user: '{{ db_user }}'
        db: '{{ django_db_name }}'
      tags:
        - never
        - create

    - name: Delete User
      community.postgresql.postgresql_user:
        name: '{{ django_db_user }}'
        priv: 'ALL'
        state: absent
        db: '{{ django_db_name }}'
        login_host: '127.0.0.1'
        login_password: '{{ db_password }}'
        login_user: '{{ db_user }}'
        fail_on_user: no
      tags:
        - never
        - delete

    - name: Delete DB
      community.postgresql.postgresql_db:
        name: '{{ django_db_name }}'
        state: absent
        login_host: '127.0.0.1'
        login_password: '{{ db_password }}'
        login_user: '{{ db_user }}'
        maintenance_db: '{{ db_name }}'
      tags:
        - never
        - delete

    - name: Check dumpfile
      file:
        path: '{{ ansible_facts.user_dir }}/{{ proj_name }}/{{ dump_name }}.sql'
        mode: 0666
        state: touch
      tags:
        - never
        - dump

    - name: Dump DB
      docker_container:
        name: 'db_backup'
        image: 'postgres:13-alpine'
        container_default_behavior: no_defaults
        purge_networks: yes
        network_mode: default
        networks:
          - name: '{{ network_name }}'
        volumes:
          - '{{ ansible_facts.user_dir }}/{{ proj_name }}/{{ dump_name }}.sql:/{{ dump_name }}.sql'
        command: '/usr/local/bin/pg_dump --dbname=postgresql://{{ db_user }}:{{ db_password }}@{{ db_host }}:{{ db_port }}/{{ django_db_name }} -O --file=/{{ dump_name }}.sql'
        restart_policy: no
        state: started
        cleanup: yes
        detach: no
        keep_volumes: no
      tags:
        - never
        - dump

    - name: Check dumpfile
      stat:
        path: '{{ ansible_facts.user_dir }}/{{ proj_name }}/{{ dump_name }}.sql'
      register: dump_exists
      ignore_errors: yes
      tags:
        - never
        - restore

    - name: restore DB
      docker_container:
        name: 'db_backup'
        image: 'postgres:13-alpine'
        container_default_behavior: no_defaults
        purge_networks: yes
        network_mode: default
        networks:
          - name: '{{ network_name }}'
        volumes:
          - '{{ ansible_facts.user_dir }}/{{ proj_name }}/{{ dump_name }}.sql:/{{ dump_name }}.sql'
        command: '/usr/local/bin/psql --dbname=postgresql://{{ db_user }}:{{ db_password }}@{{ db_host }}:{{ db_port }}/{{ django_db_name }} --file=/{{ dump_name }}.sql'
        restart_policy: no
        state: started
        cleanup: yes
        detach: no
        keep_volumes: no
      when: dump_exists.stat.exists
      tags:
        - never
        - restore
